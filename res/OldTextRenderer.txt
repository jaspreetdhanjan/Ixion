package com.ixion.client.renderer;

import java.awt.*;
import java.awt.image.*;

import com.ixion.client.resource.Shader;
import com.ixion.client.resource.Texture;

import static org.lwjgl.opengl.GL11.*;

	private class Glyph {
		public int x, y;
		public int w, h;
	}

	private final int textureWidth = 1024;
	private final int textureHeight = 1024;

	private Glyph[] glyphs = new Glyph[256];
	private Font font;
	private Texture fontTexture;

	private boolean antiAlias = false;
	private int fontSize = 0;
	private int fontHeight = 0;

	public TextRenderer(Font font) {
		this.font = font;
		fontSize = font.getSize() + 3;
	}

	public void init() {
		BufferedImage imgTemp = new BufferedImage(textureWidth, textureHeight, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = (Graphics2D) imgTemp.getGraphics();
		g.setColor(new Color(0, 0, 0, 1));
		g.fillRect(0, 0, textureWidth, textureHeight);

		int rowHeight = 0;
		int positionX = 0;
		int positionY = 0;

		for (int i = 0; i < 256; i++) {
			char ch = (char) i;

			BufferedImage fontImage = getFontImage(ch);
			Glyph newGlyph = new Glyph();
			// Glyph newGlyph = getFontGlyph(ch);

			newGlyph.w = fontImage.getWidth();
			newGlyph.h = fontImage.getHeight();

			if (positionX + newGlyph.w >= textureWidth) {
				positionX = 0;
				positionY += rowHeight;
				rowHeight = 0;
			}

			newGlyph.x = positionX;
			newGlyph.y = positionY;

			if (newGlyph.h > fontHeight) fontHeight = newGlyph.h;
			if (newGlyph.h > rowHeight) rowHeight = newGlyph.h;

			g.drawImage(fontImage, positionX, positionY, null);

			positionX += newGlyph.w;
			if (i < 256) glyphs[i] = newGlyph;
			fontImage = null;
		}
		g.dispose();

		fontTexture = new Texture(imgTemp);
		// fontTexture = new Texture("font");
		fontTexture.create();

		fontHeight -= 1;
		if (fontHeight <= 0) fontHeight = 1;
	}

	/*	private Glyph getFontGlyph(char ch) {
			Glyph value = new Glyph();
	
			BufferedImage tempfontImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
			Graphics2D g = (Graphics2D) tempfontImage.getGraphics();
			FontMetrics fontMetrics = g.getFontMetrics();
			int charWidth = fontMetrics.charWidth(ch) + 8;
			int charHeight = fontMetrics.getHeight() + 3;
			if (charWidth <= 0) charWidth = 7;
			if (charHeight <= 0) charHeight = fontSize;
			
			
			return null;
		}*/

	private BufferedImage getFontImage(char ch) {
		BufferedImage tempfontImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = (Graphics2D) tempfontImage.getGraphics();
		if (antiAlias == true) g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.setFont(font);

		FontMetrics fontMetrics = g.getFontMetrics();
		int charWidth = fontMetrics.charWidth(ch) + 8;
		int charHeight = fontMetrics.getHeight() + 3;
		if (charWidth <= 0) charWidth = 7;
		if (charHeight <= 0) charHeight = fontSize;
		g.dispose();

		BufferedImage fontImage = new BufferedImage(charWidth, charHeight, BufferedImage.TYPE_INT_ARGB);
		Graphics2D gt = (Graphics2D) fontImage.getGraphics();
		if (antiAlias == true) gt.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		gt.setFont(font);
		gt.setColor(Color.WHITE);
		gt.drawString(String.valueOf(ch), 1, 1 + fontMetrics.getAscent());
		gt.dispose();
		return fontImage;
	}

	private void drawQuad(Tessellator t, int colour, float x0, float y0, float x1, float y1, float sx0, float sy0, float sx1, float sy1) {
		float w = x1 - x0;
		float h = y1 - y0;
		float tx = sx0 / textureWidth;
		float ty = sy0 / textureHeight;
		float sw = sx1 - sx0;
		float sh = sy1 - sy0;
		float rw = (sw / textureWidth);
		float rh = (sh / textureHeight);

		t.colour(1.0f, 1.0f, 1.0f, 1.0f);

		t.normal(1f, 0, 0);

		t.texCoord(tx + rw, ty + rh);
		t.vertex(x0 + w, y0 + h, 0);

		t.texCoord(tx + rw, ty);
		t.vertex(x0 + w, y0, 0);

		t.texCoord(tx, ty + rh);
		t.vertex(x0, y0 + h, 0);

		t.texCoord(tx, ty);
		t.vertex(x0, y0, 0);
	}

	public int getWidth(String msg) {
		int totalwidth = 0;
		Glyph intObject = null;
		int currentChar = 0;
		for (int i = 0; i < msg.length(); i++) {
			currentChar = msg.charAt(i);
			if (currentChar < 256) {
				intObject = glyphs[currentChar];
			}

			if (intObject != null) totalwidth += intObject.w;
		}
		return totalwidth;
	}

	public float getHeight() {
		return fontHeight;
	}

	public void render(Shader guiShader, String msg, int colour, float x, float y, float scaleX, float scaleY) {
		Tessellator t = Tessellator.instance;

		Glyph glyph = null;
		int charCurrent;
		int totalwidth = 0;
		int i = 0;
		int d = 1;
		int c = 8;
		float startY = 0;
		int endIndex = msg.length() - 1;

		fontTexture.bind(0, guiShader);
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

		t.begin(GL_TRIANGLE_STRIP);
		while (i >= 0 && i <= endIndex) {
			charCurrent = msg.charAt(i);
			if (charCurrent < 256) glyph = glyphs[charCurrent];

			if (glyph != null) {
				if (d < 0) totalwidth += (glyph.w - c) * d;
				if (charCurrent == '\n') {
					startY -= fontHeight * d;
					totalwidth = 0;
				} else {
					drawQuad(t, colour, (totalwidth + glyph.w) * scaleX + x, startY * scaleY + y, totalwidth * scaleX + x, (startY + glyph.h) * scaleY + y, glyph.x + glyph.w, glyph.y + glyph.h, glyph.x, glyph.y);
					if (d > 0) totalwidth += (glyph.w - c) * d;
				}
				i += d;
			}
		}
		t.end();

		glDisable(GL_BLEND);
		fontTexture.unbind();
	}
}